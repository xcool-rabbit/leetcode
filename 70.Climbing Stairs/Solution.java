//70. 爬楼梯
/*
  动态规划的入门题
  动态规划就是，将整个问题分析出一个子问题，对子问题进行求解
  通常是迭代求解
  爬楼梯的方法就可以拆解成最后一步是一级还是两级台阶
  也就可以拆解为n - 1和n - 2两个问题答案的和
  具体实现思路：
  1. 递归（会重复计算很多的值，时间复杂度极高）
  2. 用一个表将每一步的推导结果存储起来（此答案即用的这种方法求解）
  3. 上一种方案的空间复杂度是O(n)，那么是否这些值都是必要的呢？
     其实不然，每一次计算只需要前两个值就可以计算，那么实际上只需要开辟两个空间，就能完成整个算式的推导
  执行用时：0 ms 已经战胜 100.00 % 的 java 提交记录
*/
class Solution {
    public int climbStairs(int n) {
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 2;
        }
        int[] chart = new int[n];
        chart[0] = 1;
        chart[1] = 2;
        for (int i = 2; i < n; i++) {
            chart[i] = chart[i - 2] + chart[i - 1];
        }
        return chart[n - 1];
    }
}
